exr_m <- read_excel("C:/Users/Oscar Rosales/Desktop/Gazer Analytica/Prueba EMFI/Turkey.xlsx",
sheet = "EXR-M")
# Exchange Rate Annually
exr_a <- read_excel("C:/Users/Oscar Rosales/Desktop/Gazer Analytica/Prueba EMFI/Turkey.xlsx",
sheet = "EXR-A")
# Exchange Rate Annually
exr_a <- read_excel("C:/Users/Oscar Rosales/Desktop/Gazer Analytica/Prueba EMFI/Turkey.xlsx",
sheet = "EXR-A")
# Exchange Rate Annually
exr_m <- read_excel("C:/Users/Oscar Rosales/Desktop/Gazer Analytica/Prueba EMFI/Turkey.xlsx",
sheet = "EXR-M")
exr_a %>%
select(date, exr_a ) %>%
mutate(date = paste(date, "01-01", sep = '-'),
date = as.Date(date)) %>%
filter(exr_a != is.na(exr_a))
exr_a <- exr_a %>%
select(date, exr_a ) %>%
mutate(date = paste(date, "01-01", sep = '-'),
date = as.Date(date)) %>%
filter(exr_a != is.na(exr_a))
min(exr_a$date)
max(exr_a$date)
ts.exr_a <- ts(exr_a$exr_a, start = 1981, end = 2022, frequency = 1)
plot(ts.exr_a)
adf.test(ts.exr_a)
model_exr_a <-auto.arima(ts.exr_a , seasonal = F, stationary = F)
summary(model_exr_a)
checkresiduals(model_exr_a) # Look like white noise
predictions_exr_a <- forecast(model_exr_a, h =2)
predictions_exr_a <- forecast(model_exr_a, h =2)
plot(predictions_exr_a)
exr_m <- exr_m %>%
select(date, exr_m) %>%
mutate( date = as.Date(date)) %>%
filter(exr_m != is.na(exr_m))
min(exr_m$date)
max(exr_m$date)
ts.exr_m <- ts(exr_m$exr_m, start = c(2000,1), end = c(2023,01), frequency = 12)
plot(ts.exr_m)
adf.test(ts.exr_m)
model_exr_m <- auto.arima(ts.exr_m, seasonal = T, stationary = F)
model_exr_m <- auto.arima(ts.exr_m, seasonal = F, stationary = F)
model_exr_m
checkresiduals(model_exr_m)
predictions_exr_m <- forecast(model_exr_m, h = 23)
plot(predictions_exr_m)
predictions_exr_m
ts.gdp_a <- ts(gdp_a$gdp_a, start = 1980, end = 2022,  frequency = 1)
adf.test(ts.gdp_a) #Results are as expected
model_gpa_a <- auto.arima(ts.gdp_a, seasonal = F, stationary = F)
summary(model_gpa_a)
checkresiduals(model_gpa_a) # Good enough
predictions_gdp_a <- forecast(model_gpa_a, h = 2)
plot(predictions_gdp_a)
gdp_q <- gdp_q %>%
select(date, gdp_q) %>%
mutate(
date = as.Date(date)) %>%
filter(gdp_q != is.na(gdp_q))
View(gdp_q)
mindate <- min(gdp_q$date)
maxdate <- max(gdp_q$date)
ts.gdp_q <- ts(gdp_q$gdp_q, start = c(1998,3), end = c(2022,9), frequency = 4)
plot(ts.gdp_q)
gdp_q
View(gdp_q)
model_gpa_q <- auto.arima(ts.gdp_q, seasonal = T, stationary = F)
model_gpa_q <- auto.arima(ts.gdp_q, seasonal = T, stationary = F)
summary(model_gpa_q)
checkresiduals(model_gpa_q) # Looks well
predictions_gdp_q <- forecast(model_gpa_q, h = 9)
plot(predictions_gdp_q)
predictions_gdp_q
ip_m
ip_m <- ip_m %>%
select(date, ip_m) %>%
mutate(date =  as.Date(date)) %>%
filter(ip_m != is.na(ip_m))
ts.ip_m <- ts(ip_m$ip_m, start = c(2005,1), end = c(2022,12), frequency = 12)
plot(ts.ip_m)
adf.test(ts.ip_m) # It is not stationary as expected
model_ip_m <- auto.arima(ts.ip_m, seasonal = F, stationary = F)
summary(model_ip_m)
checkresiduals(model_ip_m) # Well enough
predictions_ip_m <- forecast(model_ip_m, h = 24 )
plot(predictions_ip_m)
inf_a <- inf_a %>%
select(date, inf_a) %>%
mutate(
date = paste(date, "01-01", sep = '-'),
date = as.Date(date)) %>%
filter(inf_a != is.na(inf_a))
min(inf_a$date)
max(inf_a$date)
ts.inf_a <- ts(inf_a$inf_a, start = 1986, end = 2022 , frequency = 1)
plot(ts.inf_a)
adf.test(ts.inf_a)
model_inf_a <- auto.arima(ts.inf_a, seasonal = F, stationary = F)
summary(model_inf_a)
checkresiduals(model_inf_a) # Look white noise
predictions_inf_a <- forecast(model_inf_a, h =2)
predictions_inf_a
plot(predictions_inf_a)
plot(ts.inf_a)
plot(predictions_inf_a)
inf_m <- inf_m %>%
select(date, inf_m) %>%
mutate(
date = as.Date(date)
) %>%
filter(inf_m != is.na(inf_m))
View(inf_m)
ts.inf_m <- ts(inf_m$inf_m,  start = c(2003, 2), end = c(2023,1), frequency = 12 )
plot(ts.inf_m)
adf.test(ts.inf_m)
isSeasonal(ts.inf_m, test = "combined", freq = 12)
model_inf_m_s <- auto.arima(ts.inf_m, seasonal = T, stationary = T )
summary(model_inf_m_s)
ts.inf_m <- ts(inf_m$inf_m,  start = c(2003, 2), end = c(2023,1), frequency = 12 )
plot(ts.inf_m)
adf.test(ts.inf_m)
plot(ts.inf_m)
adf.test(ts.inf_m)
isSeasonal(ts.inf_m, test = "combined", freq = 12)
model_inf_m_s <- auto.arima(ts.inf_m, seasonal = T, stationary = T )
summary(model_inf_m_s)
model_inf_m_ns <- auto.arima(ts.inf_m, seasonal = T, stationary = F )
model_inf_m_a <- auto.arima(ts.inf_m)
model_inf_m_ns <- auto.arima(ts.inf_m, seasonal = T, stationary = F )
checkresiduals(model_inf_m_s)
checkresiduals(model_inf_m_ns)
predictions_inf_m_ns <- forecast(model_inf_m_ns, h = 23 )
predictions_inf_m_ns <- forecast(model_inf_m_ns, h = 23 )
predictions_inf_m_ns <- forecast(model_inf_m_ns, h = 23 )
plot(predictions_inf_m_ns)
exr_a <- exr_a %>%
select(date, exr_a ) %>%
mutate(date = paste(date, "01-01", sep = '-'),
date = as.Date(date)) %>%
filter(exr_a != is.na(exr_a))
min(exr_a$date)
max(exr_a$date)
ts.exr_a <- ts(exr_a$exr_a, start = 1981, end = 2022, frequency = 1)
plot(ts.exr_a)
adf.test(ts.exr_a)
model_exr_a <-auto.arima(ts.exr_a , seasonal = F, stationary = F)
summary(model_exr_a)
checkresiduals(model_exr_a) # Well enough
predictions_exr_a <- forecast(model_exr_a, h =2)
plot(predictions_exr_a)
exr_m <- exr_m %>%
select(date, exr_m) %>%
mutate( date = as.Date(date)) %>%
filter(exr_m != is.na(exr_m))
min(exr_m$date)
max(exr_m$date)
ts.exr_m <- ts(exr_m$exr_m, start = c(2000,1), end = c(2023,01), frequency = 12)
plot(ts.exr_m)
adf.test(ts.exr_m)
model_exr_m <- auto.arima(ts.exr_m, seasonal = F, stationary = F)
model_exr_m
checkresiduals(model_exr_m) # Not as white noise as I'd wish
predictions_exr_m <- forecast(model_exr_m, h = 23)
plot(predictions_exr_m)
gdp_q <- gdp_q %>%
select(date, gdp_q) %>%
mutate(
date = as.Date(date)) %>%
filter(gdp_q != is.na(gdp_q))
mindate <- min(gdp_q$date)
maxdate <- max(gdp_q$date)
ts.gdp_q <- ts(gdp_q$gdp_q, start = c(1998,3), end = c(2022,9), frequency = 4)
plot(ts.gdp_q)
ts.gdp_q
maxdate <- max(gdp_q$date)
maxdate
mindate <- min(gdp_q$date)
mindate
maxdate
ts.gdp_q <- ts(gdp_q$gdp_q, start = c(1998,1), end = c(2022,3), frequency = 4)
plot(ts.gdp_q)
adf.test(ts.gdp_q)  # Results are the expected
model_gpa_q <- auto.arima(ts.gdp_q, seasonal = T, stationary = F)
summary(model_gpa_q)
checkresiduals(model_gpa_q) # Looks well
predictions_gdp_q <- forecast(model_gpa_q, h = 9)
plot(predictions_gdp_q)
predictions_gdp_q
predictions_gdp_q <- forecast(model_gpa_q, h = 9)
plot(predictions_gdp_q)
predictions_gdp_q
plot(predictions_gdp_q)
predictions_gdp_q
ip_m
ip_m <- ip_m %>%
select(date, ip_m) %>%
mutate(date =  as.Date(date)) %>%
filter(ip_m != is.na(ip_m))
min(ip_m$date)
max(ip_m$date)
ts.ip_m <- ts(ip_m$ip_m, start = c(2005,1), end = c(2022,12), frequency = 12)
plot(ts.ip_m)
adf.test(ts.ip_m) # It is not stationary as expected
model_ip_m <- auto.arima(ts.ip_m, seasonal = F, stationary = F)
summary(model_ip_m)
checkresiduals(model_ip_m) # Well enough
predictions_ip_m <- forecast(model_ip_m, h = 24 )
plot(predictions_ip_m)
predictions_ip_m
inf_a <- inf_a %>%
select(date, inf_a) %>%
mutate(
date = paste(date, "01-01", sep = '-'),
date = as.Date(date)) %>%
filter(inf_a != is.na(inf_a))
min(inf_a$date)
max(inf_a$date)
ts.inf_a <- ts(inf_a$inf_a, start = 1986, end = 2022 , frequency = 1)
plot(ts.inf_a)
adf.test(ts.inf_a)
model_inf_a <- auto.arima(ts.inf_a, seasonal = F, stationary = F)
summary(model_inf_a)
checkresiduals(model_inf_a) # Look white noise
predictions_inf_a <- forecast(model_inf_a, h =2)
plot(predictions_inf_a)
inf_a
plot(predictions_gdp_a)
ts.gdp_a
ts.gdp_a <- ts(gdp_a$gdp_a, start = 1980)
ts.gdp_a
adf.test(ts.gdp_a) #Results are as expected
model_gpa_a <- auto.arima(ts.gdp_a, seasonal = F, stationary = F)
summary(model_gpa_a)
checkresiduals(model_gpa_a) # Good enough
predictions_gdp_a <- forecast(model_gpa_a, h = 2)
plot(predictions_gdp_a)
plot(predictions_inf_a)
inf_m <- inf_m %>%
select(date, inf_m) %>%
mutate(
date = as.Date(date)
) %>%
filter(inf_m != is.na(inf_m))
View(inf_m)
ts.inf_m <- ts(inf_m$inf_m,  start = c(2003, 2), end = c(2023,1), frequency = 12 )
max(inf_m$date)
min(inf_m$date)
plot(ts.inf_m)
adf.test(ts.inf_m)
plot(predictions_inf_m_ns)
exr_a <- exr_a %>%
select(date, exr_a ) %>%
mutate(date = paste(date, "01-01", sep = '-'),
date = as.Date(date)) %>%
filter(exr_a != is.na(exr_a))
min(exr_a$date)
max(exr_a$date)
ts.exr_a <- ts(exr_a$exr_a, start = 1981, end = 2022, frequency = 1)
plot(ts.exr_a)
adf.test(ts.exr_a)
model_exr_a <-auto.arima(ts.exr_a , seasonal = F, stationary = F)
summary(model_exr_a)
predictions_exr_a <- forecast(model_exr_a, h =2)
predictions_exr_a <- forecast(model_exr_a, h =2)
plot(predictions_exr_a)
exr_m <- exr_m %>%
select(date, exr_m) %>%
mutate( date = as.Date(date)) %>%
filter(exr_m != is.na(exr_m))
min(exr_m$date)
max(exr_m$date)
ts.exr_m <- ts(exr_m$exr_m, start = c(2000,1), end = c(2023,01), frequency = 12)
plot(ts.exr_m)
model_exr_m <- auto.arima(ts.exr_m, seasonal = F, stationary = F)
model_exr_m
checkresiduals(model_exr_m) # Not as white noise as I'd wish
predictions_exr_m <- forecast(model_exr_m, h = 23)
plot(predictions_exr_m)
predictions_exr_m
knitr::opts_chunk$set(echo = TRUE)
gdp_a <- gdp_a %>%
select(date, gdp_a) %>%
mutate(date = paste(date, "01-01", sep = '-'),
date = as.Date(date)) %>%
filter(gdp_a != is.na(gdp_a))
# checking how the time series looks
gdp_a %>%
#ggplot
ggplot(aes(x = date, y = gdp_a))+
#geom
geom_line()
# Converting into a time series object
ts.gdp_a <- ts(gdp_a$gdp_a, start = 1980)
# Probably there is stationary, but just confirming
adf.test(ts.gdp_a) #Results are as expected
# Applying an command that estimates the best possible model considering the
# stationary
model_gpa_a <- auto.arima(ts.gdp_a, seasonal = F, stationary = F)
summary(model_gpa_a)
predictions_gdp_a <- forecast(model_gpa_a, h = 2)
plot(predictions_gdp_a)
predictions_gdp_a
gdp_q <- gdp_q %>%
select(date, gdp_q) %>%
mutate(
date = as.Date(date)) %>%
filter(gdp_q != is.na(gdp_q))
ts.gdp_q <- ts(gdp_q$gdp_q, start = c(1998,1), end = c(2022,3), frequency = 4)
# Lets check how it looks
plot(ts.gdp_q)
plot(ts.gdp_a)
gdp_a <- gdp_a %>%
select(date, gdp_a) %>%
mutate(date = paste(date, "01-01", sep = '-'),
date = as.Date(date)) %>%
filter(gdp_a != is.na(gdp_a))
#Checking how it looks
plot(ts.gdp_a)
adf.test(ts.gdp_q)  # Results are the expected
# We estimate the best possible model applying what we know
model_gpa_q <- auto.arima(ts.gdp_q, seasonal = T, stationary = F)
summary(model_gpa_q)
checkresiduals(model_gpa_a)
checkresiduals(model_gpa_q)
ip_m <- ip_m %>%
select(date, ip_m) %>%
mutate(date =  as.Date(date)) %>%
filter(ip_m != is.na(ip_m))
ts.ip_m <- ts(ip_m$ip_m, start = c(2005,1), end = c(2022,12), frequency = 12)
# Lets see how it looks
plot(ts.ip_m)
adf.test(ts.ip_m) # It is not stationary as expected
model_ip_m <- auto.arima(ts.ip_m, seasonal = F, stationary = F)
summary(model_ip_m)
checkresiduals(model_ip_m) # Well enough
checkresiduals(model_ip_m) # Well enough
predictions_ip_m <- forecast(model_ip_m, h = 24 )
plot(predictions_ip_m)
predictions_ip_m
inf_a <- inf_a %>%
select(date, inf_a) %>%
mutate(
date = paste(date, "01-01", sep = '-'),
date = as.Date(date)) %>%
filter(inf_a != is.na(inf_a))
inf_a <- inf_a %>%
select(date, inf_a) %>%
mutate(
date = paste(date, "01-01", sep = '-'),
date = as.Date(date)) %>%
filter(inf_a != is.na(inf_a))
ts.inf_a <- ts(inf_a$inf_a, start = 1986, end = 2022 , frequency = 1)
# Lets check how it looks
plot(ts.inf_a)
adf.test(ts.inf_a)
# Results as expected
model_inf_a <- auto.arima(ts.inf_a, seasonal = F, stationary = F)
summary(model_inf_a)
# Check residuals
checkresiduals(model_inf_a) # Look white noise
adf.test(ts.inf_a)
model_inf_a <- auto.arima(ts.inf_a, seasonal = F, stationary = F)
summary(model_inf_a)
checkresiduals(model_inf_a) # Look white noise
auto.arima(ts.inf_a)
inf_m <- inf_m %>%
select(date, inf_m) %>%
mutate(
date = as.Date(date)
) %>%
filter(inf_m != is.na(inf_m))
ts.inf_m <- ts(inf_m$inf_m,  start = c(2003, 2), end = c(2023,1), frequency = 12 )
plot(ts.inf_m)
# I will just formally test for stationary
adf.test(ts.inf_m)
#According to the test it is stationary
# It is inflation, I suspect seasonality and i will test for it
isSeasonal(ts.inf_m, test = "combined", freq = 12)
model_inf_m_ns <- auto.arima(ts.inf_m, seasonal = T, stationary = F )
checkresiduals(model_inf_m_ns)
predictions_inf_m_ns <- forecast(model_inf_m_ns, h = 23 )
plot(predictions_inf_m_ns)
predictions_inf_m_ns
exr_a <- exr_a %>%
select(date, exr_a ) %>%
mutate(date = paste(date, "01-01", sep = '-'),
date = as.Date(date)) %>%
filter(exr_a != is.na(exr_a))
# Convert into a time series object
ts.exr_a <- ts(exr_a$exr_a, start = 1981, end = 2022, frequency = 1)
# See how it looks
plot(ts.exr_a)
adf.test(ts.exr_a)
# Results as expected
# Model
model_exr_a <-auto.arima(ts.exr_a , seasonal = F, stationary = F)
summary(model_exr_a)
# Check residuals
checkresiduals(model_exr_a) # Well enough
adf.test(ts.exr_a)
summary(model_exr_a)
predictions_exr_a <- forecast(model_exr_a, h =2)
plot(predictions_exr_a)
exr_m <- exr_m %>%
select(date, exr_m) %>%
mutate( date = as.Date(date)) %>%
filter(exr_m != is.na(exr_m))
ts.exr_m <- ts(exr_m$exr_m, start = c(2000,1), end = c(2023,01), frequency = 12)
plot(ts.exr_m)
# Dickey Fuller to confirm
adf.test(ts.exr_m)
# Results as expected
# Model
model_exr_m <- auto.arima(ts.exr_m, seasonal = F, stationary = F)
model_exr_m
# check residuals
checkresiduals(model_exr_m) # Not as white noise as I'd wish
# Looks fine
auto.arima(ts.exr_m)
model_exr_m
a <- auto.arima(ts.exr_m)
checkresiduals(a) # Not as white noise as I'd wish
isSeasonal(ts.exr_m)
View(a)
# Dickey Fuller to confirm
adf.test(ts.exr_m)
# Results as expected
# Model
model_exr_m <- auto.arima(ts.exr_m, seasonal = F, stationary = F)
model_exr_m
# check residuals
checkresiduals(model_exr_m) # Not as white noise as I'd wish
# Looks fine
predictions_exr_m <- forecast(model_exr_m, h = 23)
predictions_exr_m
plot(predictions_exr_m)
# Gross Domestic Product Annually
gdp_a <- read_excel("C:/Users/Oscar Rosales/Desktop/Gazer Analytica/Prueba EMFI/Turkey.xlsx",
sheet = "GDP-A")
gdp_a1 <- gdp_a %>%
select(date, gdp_a) %>%
mutate(date = paste(date, "01-01", sep = '-'),
date = as.Date(date)) %>%
filter(gdp_a != is.na(gdp_a))
# Converting into a time series object
ts.gdp_a <- ts(gdp_a1$gdp_a, start = 1980)
#Checking how it looks
plot(ts.gdp_a)
install.packages("terra")
install.packages('terra', repos='https://rspatial.r-universe.dev')
Sys.setenv("R_REMOTES_NO_ERRORS_FROM_WARNINGS" = "true")
remotes::install_github("rspatial/terra")
install.packages("~/Downloads/terra_1.4-22.tgz", repos=NULL, type="source")
install.packages("~/Downloads/terra_1.4-22.tgz", repos=NULL, type="source")
install.packages("Rtools")
Sys.setenv("R_REMOTES_NO_ERRORS_FROM_WARNINGS" = "true")
remotes::install_github("rspatial/terra")
library(Rcpp)
install.packages("Rtools")
Sys.setenv("R_REMOTES_NO_ERRORS_FROM_WARNINGS" = "true")
Sys.setenv("R_REMOTES_NO_ERRORS_FROM_WARNINGS" = "true")
remotes::install_github("rspatial/terra")
# Simple features (a standardised way to encode vector data ie. points, lines, polygons)
library(sf)
library(ggplot2)
Sys.setenv("R_REMOTES_NO_ERRORS_FROM_WARNINGS" = "true")
remotes::install_github("rspatial/terra")
install.packages("SqlRender")
library(SqlRender)
install.packages("terra")
library(terra)
install.packages("tmaps")
install.packages("tmap")
library(tmap)
install.packages('devtools')
Sys.setenv("R_REMOTES_NO_ERRORS_FROM_WARNINGS" = "true")
remotes::install_github("rspatial/terra")
library(terra)
install.packages("terra")
install.packages("C:/Users/Oscar Rosales/Desktop/Oscar/terra_1.7-18.tar.gz", repos = NULL, type = "source")
install.packages('terra', repos='https://rspatial.r-universe.dev')
library(terra)
library(raster)
Sys.setenv("R_REMOTES_NO_ERRORS_FROM_WARNINGS" = "true")
remotes::install_github("rspatial/terra")
install.packages('devtools')
library(RcppProgress)
detach("package:RcppProgress", unload = TRUE)
install.packages('terra', repos='https://rspatial.r-universe.dev')
Sys.setenv("R_REMOTES_NO_ERRORS_FROM_WARNINGS" = "true")
install.packages('terra', repos='https://rspatial.r-universe.dev')
install.packages("C:/Users/Oscar Rosales/Desktop/Oscar/terra_1.7-18.tar.gz", repos=NULL, type='source')
library(Rcpp)
library(Rcpp)
evalCpp("1+1")
Sys.setenv("R_REMOTES_NO_ERRORS_FROM_WARNINGS" = "true")
remotes::install_github("rspatial/terra")
install.packages("C:/Users/Oscar Rosales/Desktop/Oscar/terra_1.7-18.tar.gz", repos=NULL, type='source')
install.packages("C:/Users/Oscar Rosales/Desktop/Oscar/terra_1.7-19.tar.gz", repos=NULL, type='source')
install.packages("C:/Users/Oscar Rosales/Desktop/Oscar/terra", repos=NULL, type='source')
install.packages('terra', repos='https://rspatial.r-universe.dev')
options(timeout = max(1000, getOption("timeout")))
install.packages('terra', repos='https://rspatial.r-universe.dev')
Sys.setenv("R_REMOTES_NO_ERRORS_FROM_WARNINGS" = "true")
install.packages('terra', repos='https://rspatial.r-universe.dev')
install.packages('terra', repos='https://rspatial.r-universe.dev')
install.packages("terra")
library(shiny)
runApp("PEV")
setwd("C:/Users/Oscar Rosales/Desktop/Gazer Analytica/Panel Economico Venezuela")
getwd()
