SocioecnomicMetrics <- c("Population", "Unemployment rate - Percent of total labor force")
FiscalMetrics <- c("General government revenue - Percent of GDP", "General government total expenditure - Percent of GDP", "General government net lending/borrowing - Percent of GDP",
"General government structural balance - Percent of potential GDP", "General government primary net lending/borrowing - Percent of GDP",
"General government net debt - Percent of GDP", "General government gross debt - Percent of GDP")
unique(WEO_Data$Metric)
Countries <- unique(WEO_Data$Country)
percent_metrics <- WEO_Data %>%
mutate( x =  str_detect(Units ,pattern = "Percent") ) %>%
filter( x  == T) %>%
distinct(`Metric-Unit`) %>%
pull(`Metric-Unit`)
percapita_metrics <- WEO_Data %>%
mutate( x =  str_detect(`Metric-Unit` ,pattern = "per capita") ) %>%
filter( x  == T) %>%
distinct(`Metric-Unit`) %>%
pull(`Metric-Unit`)
billions_metrics <- WEO_Data %>%
mutate( x =  str_detect(Scale ,pattern = "Billions") ) %>%
filter( x  == T) %>%
distinct(`Metric-Unit`) %>%
pull(`Metric-Unit`)
ui <- fluidPage( theme = shinytheme("spacelab"),
navbarPage(
"World Economic Outlook Visualizer",
tabPanel("Real Economy",
sidebarPanel(
# code the dropdown
selectInput(inputId = "realmetric", label = strong("Select Metric"),
choices = RealMetrics),
# code the multiple selection country
multiInput(inputId =  "realcountry",  label = strong("Select Country"),
choices = Countries, selected = "Venezuela"),
# code dates selecter
dateRangeInput("realdates", "Dates Range", start = ("1980-01-01") , end = ("2022-01-01")  ,
format = "yyyy-mm-dd",language = "en" , separator = "to", width = NULL)
),
mainPanel(
textOutput("title_realmetric"),
plotOutput("chart_realmetric", width = "1200px", height = "600px"),
tableOutput("realtable")
)),
tabPanel("External Sector",
sidebarPanel(
# code the dropdown
selectInput(inputId = "externalmetric", label = strong("Select Metric"),
choices = ExternealMetrics),
# code the multiple selection country
multiInput(inputId =  "externalcountry",  label = strong("Select Country"),
choices = Countries, selected = "Venezuela"),
# code dates selecter
dateRangeInput("externaldates", "Dates Range", start = ("1980-01-01") , end = ("2022-01-01")  ,
format = "yyyy-mm-dd",language = "en" , separator = "to", width = NULL)
),
mainPanel(
textOutput("title_external"),
plotOutput("chart_externalmetric", width = "1200px", height = "600px"),
tableOutput("externaltable")
)),
tabPanel("Fiscal Sector",
sidebarPanel(
# code the dropdown
selectInput(inputId = "fiscalmetric", label = strong("Select Metric"),
choices = FiscalMetrics),
# code the multiple selection country
multiInput(inputId =  "fiscalcountry",  label = strong("Select Country"),
choices = Countries, selected = "Venezuela"),
# code dates selecter
dateRangeInput("fiscaldates", "Dates Range", start = ("1980-01-01") , end = ("2022-01-01")  ,
format = "yyyy-mm-dd",language = "en" , separator = "to", width = NULL
)),
mainPanel(
textOutput("title_fiscalmetric"),
plotOutput("chart_fiscalmetric", width = "1200px", height = "600px"),
tableOutput("fiscaltable")
)),
tabPanel("Socioeconomic",
sidebarPanel(
# code the dropdown
selectInput(inputId = "sociometric", label = strong("Select Metric"),
choices = SocioecnomicMetrics),
# code the multiple selection country
multiInput(inputId =  "sociocountry",  label = strong("Select Country"),
choices = Countries, selected = "Venezuela"),
# code dates selecter
dateRangeInput("sociodates", "Dates Range", start = ("1980-01-01") , end = ("2022-01-01")  ,
format = "yyyy-mm-dd",language = "en" , separator = "to", width = NULL)),
mainPanel(
textOutput("title_sociometric"),
plotOutput("chart_sociometric", width = "1200px", height = "600px"),
tableOutput("sociotable")
)
))
)
server <- function(input, output){
# Input Real Metric
# Dynamic chart formatting in real metrics
ru <- reactive({
WEO_Data %>%
filter(Date >=input$realdates[1] & Date<=input$realdates[2]) %>%
filter(`Metric-Unit` == input$realmetric) %>%
filter(Country %in% input$realcountry) %>%
distinct(`Metric-Unit`) %>%
pull(`Metric-Unit`)
})
# Dynamic dates in real metric
rm <- reactive({
WEO_Data %>%
filter(Date >=input$realdates[1] & Date<=input$realdates[2]) %>%
filter(`Metric-Unit` == input$realmetric) %>%
filter(Country %in% input$realcountry)
})
# Output real
output$title_realmetric <- renderText({
ru()
})
output$chart_realmetric <- renderPlot({
if( ru() %in% percent_metrics ) {
rm() %>%
#Data manipulation
mutate(Value = Value/100) %>%
#ggplot
ggplot()+
#geoms
geom_line( aes(x= Date, y = Value, color = Country), size = 2)+
geom_hline(yintercept = 0, linetype = "dashed", color = "black")+
#theme
theme_classic()+
theme(
axis.text = element_textbox_simple( size = 14),
legend.text = element_text( size = 14),
legend.title = element_text(size = 14),
panel.grid.major.y  = element_line(linetype = 2, colour ="grey" )
)+
#scales
scale_y_continuous(labels = scales::percent,
expand = c(0,0))+
#labs
labs(y = element_blank(), x = element_blank())
}
else{
if(ru() %in% percapita_metrics  ){
rm() %>%
#ggplot
ggplot()+
#geoms
geom_line( aes(x= Date, y = Value, color = Country), size = 2)+
#theme
theme_classic()+
theme(
axis.text = element_textbox_simple( size = 14),
legend.text = element_textbox( size = 14),
legend.title = element_text(size = 14),
panel.grid.major.y  = element_line(linetype = 2, colour ="grey" )
)+
#scales
scale_y_continuous(labels = dollar_format(prefix = "$"),
limits = c(0, NA),
expand = c(0,0))  +
#labs
labs(y = element_blank(), x = element_blank())
}
else  {
if(ru() %in% billions_metrics  ){
rm() %>%
#ggplot
ggplot()+
#geoms
geom_line( aes(x= Date, y = Value, color = Country), size = 2)+
theme_classic()+
theme(
axis.text = element_textbox_simple( size = 14),
legend.text = element_text( size = 14),
legend.title = element_text(size = 14),
panel.grid.major.y  = element_line(linetype = 2, colour ="grey" )
)+
#scales
scale_y_continuous(labels = dollar_format(prefix = "$", suffix = " Billions"),
limits = c(0, NA),
expand = c(0,0))+
#labs)
labs(y = element_blank(), x = element_blank())
}
}
}
})
output$realtable <- renderTable({
# Create the stargazer table
rm() %>%
select(Country, Value) %>%
pivot_wider(
names_from = Country,
values_from = Value
) %>%
unnest() %>%
as.data.frame() %>%
stargazer(., title = "Summary Table", type="text", column.sep.width = "10pt")
})
# Input External Metric
# Dynamic chart formatting in External Metric
ref <- reactive({
WEO_Data %>%
filter(Date >=input$externaldates[1] & Date<=input$externaldates[2]) %>%
filter(`Metric-Unit` == input$externalmetric) %>%
filter(Country %in% input$externalcountry) %>%
distinct(`Metric-Unit`) %>%
pull(`Metric-Unit`)
})
# Dynamic dates in External Metric
ret <- reactive({
WEO_Data %>%
filter(Date >=input$externaldates[1] & Date<=input$externaldates[2]) %>%
filter(`Metric-Unit` == input$externalmetric) %>%
filter(Country %in% input$externalcountry)
})
# Output real
output$title_external <- renderText({
ref()
})
output$chart_externalmetric <- renderPlot({
if( ref() %in% percent_metrics ) {
ret() %>%
#Data manipulation
mutate(Value = Value/100) %>%
#ggplot
ggplot()+
#geoms
geom_line( aes(x= Date, y = Value, color = Country), size = 2)+
geom_hline(yintercept = 0, linetype = "dashed", color = "black")+
#theme
theme_classic()+
theme(
axis.text = element_textbox_simple( size = 14),
legend.text = element_text( size = 14),
legend.title = element_text(size = 14),
panel.grid.major.y  = element_line(linetype = 2, colour ="grey" )
)+
#scales
scale_y_continuous(labels = scales::percent,
expand = c(0,0))+
#labs
labs(y = element_blank(), x = element_blank())
}
else{
if(ref() %in% percapita_metrics  ){
ret() %>%
#ggplot
ggplot()+
#geoms
geom_line( aes(x= Date, y = Value, color = Country), size = 2)+
#theme
theme_classic()+
theme(
axis.text = element_textbox_simple( size = 14),
legend.text = element_textbox( size = 14),
legend.title = element_text(size = 14),
panel.grid.major.y  = element_line(linetype = 2, colour ="grey" )
)+
#scales
scale_y_continuous(labels = dollar_format(prefix = "$"),
limits = c(0, NA),
expand = c(0,0))  +
#labs
labs(y = element_blank(), x = element_blank())
}
else  {
if(ref() %in% billions_metrics  ){
ret() %>%
#ggplot
ggplot()+
#geoms
geom_line( aes(x= Date, y = Value, color = Country), size = 2)+
geom_hline(yintercept = 0, linetype = "dashed", color = "black")+
#theme
theme_classic()+
theme(
axis.text = element_textbox_simple( size = 14),
legend.text = element_text( size = 14),
legend.title = element_text(size = 14),
panel.grid.major.y  = element_line(linetype = 2, colour ="grey" )
)+
#scales
scale_y_continuous(labels = dollar_format(prefix = "$", suffix = " Billions"),
limits = c(NA, NA),
expand = c(0,0))+
#labs)
labs(y = element_blank(), x = element_blank())
}
}
}
})
output$externaltable <- renderTable({
# Create the stargazer table
ret() %>%
select(Country, Value) %>%
pivot_wider(
names_from = Country,
values_from = Value
) %>%
unnest() %>%
as.data.frame() %>%
stargazer(., title = "Summary Table", type="text", column.sep.width = "10pt")
})
# Input Fiscal Metric
# Dynamic chart formatting in External Metric
rff <- reactive({
WEO_Data %>%
filter(Date >=input$fiscaldates[1] & Date<=input$fiscaldates[2]) %>%
filter(`Metric-Unit` == input$fiscalmetric) %>%
filter(Country %in% input$fiscalcountry) %>%
distinct(`Metric-Unit`) %>%
pull(`Metric-Unit`)
})
# Dynamic dates in External Metric
rft <- reactive({
WEO_Data %>%
filter(Date >=input$fiscaldates[1] & Date<=input$fiscaldates[2]) %>%
filter(`Metric-Unit` == input$fiscalmetric) %>%
filter(Country %in% input$fiscalcountry)
})
# Output real
output$title_fiscalmetric <- renderText({
rff()
})
output$chart_fiscalmetric <- renderPlot({
if( rff() %in% percent_metrics ) {
rft() %>%
#Data manipulation
mutate(Value = Value/100) %>%
#ggplot
ggplot()+
#geoms
geom_line( aes(x= Date, y = Value, color = Country), size = 2)+
geom_hline(yintercept = 0, linetype = "dashed", color = "black")+
#theme
theme_classic()+
theme(
axis.text = element_textbox_simple( size = 14),
legend.text = element_text( size = 14),
legend.title = element_text(size = 14),
panel.grid.major.y  = element_line(linetype = 2, colour ="grey" )
)+
#scales
scale_y_continuous(labels = scales::percent,
expand = c(0,0))+
#labs
labs(y = element_blank(), x = element_blank())
}
else{
if(rff() %in% percapita_metrics  ){
rft() %>%
#ggplot
ggplot()+
#geoms
geom_line( aes(x= Date, y = Value, color = Country), size = 2)+
#theme
theme_classic()+
theme(
axis.text = element_textbox_simple( size = 14),
legend.text = element_textbox( size = 14),
legend.title = element_text(size = 14),
panel.grid.major.y  = element_line(linetype = 2, colour ="grey" )
)+
#scales
scale_y_continuous(labels = dollar_format(prefix = "$"),
limits = c(0, NA),
expand = c(0,0))  +
#labs
labs(y = element_blank(), x = element_blank())
}
else  {
if(rff() %in% billions_metrics  ){
rft() %>%
#ggplot
ggplot()+
#geoms
geom_line( aes(x= Date, y = Value, color = Country), size = 2)+
geom_hline(yintercept = 0, linetype = "dashed", color = "black")+
#theme
theme_classic()+
theme(
axis.text = element_textbox_simple( size = 14),
legend.text = element_text( size = 14),
legend.title = element_text(size = 14),
panel.grid.major.y  = element_line(linetype = 2, colour ="grey" )
)+
#scales
scale_y_continuous(labels = dollar_format(prefix = "$", suffix = " Billions"),
limits = c(NA, NA),
expand = c(0,0))+
#labs)
labs(y = element_blank(), x = element_blank())
}
}
}
})
output$fiscaltable <- renderTable({
# Create the stargazer table
rft() %>%
select(Country, Value) %>%
pivot_wider(
names_from = Country,
values_from = Value
) %>%
unnest() %>%
as.data.frame() %>%
stargazer(., title = "Summary Table", type="text", column.sep.width = "10pt")
})
# Input Socioeconomic Metric
# Dynamic chart formatting in External Metric
rsef <- reactive({
WEO_Data %>%
filter(Date >=input$sociodates[1] & Date<=input$sociodates[2]) %>%
filter(`Metric-Unit` == input$sociometric) %>%
filter(Country %in% input$sociocountry) %>%
distinct(`Metric-Unit`) %>%
pull(`Metric-Unit`)
})
# Dynamic dates in External Metric
rset <- reactive({
WEO_Data %>%
filter(Date >=input$sociodates[1] & Date<=input$sociodates[2]) %>%
filter(`Metric-Unit` == input$sociometric) %>%
filter(Country %in% input$sociocountry)
})
# Output real
output$title_sociometric <- renderText({
rsef()
})
output$chart_sociometric <- renderPlot({
if( rsef() %in% percent_metrics ) {
rset() %>%
#Data manipulation
mutate(Value = Value/100) %>%
#ggplot
ggplot()+
#geoms
geom_line( aes(x= Date, y = Value, color = Country), size = 2)+
geom_hline(yintercept = 0, linetype = "dashed", color = "black")+
#theme
theme_classic()+
theme(
axis.text = element_textbox_simple( size = 14),
legend.text = element_text( size = 14),
legend.title = element_text(size = 14),
panel.grid.major.y  = element_line(linetype = 2, colour ="grey" )
)+
#scales
scale_y_continuous(labels = scales::percent,
expand = c(0,0))+
#labs
labs(y = element_blank(), x = element_blank())
}
else{
if(rsef() %in% percapita_metrics  ){
rset() %>%
#ggplot
ggplot()+
#geoms
geom_line( aes(x= Date, y = Value, color = Country), size = 2)+
#theme
theme_classic()+
theme(
axis.text = element_textbox_simple( size = 14),
legend.text = element_textbox( size = 14),
legend.title = element_text(size = 14),
panel.grid.major.y  = element_line(linetype = 2, colour ="grey" )
)+
#scales
scale_y_continuous(labels = dollar_format(prefix = "$"),
limits = c(0, NA),
expand = c(0,0))  +
#labs
labs(y = element_blank(), x = element_blank())
}
else  {
rset() %>%
#ggplot
ggplot()+
#geoms
geom_line( aes(x= Date, y = Value, color = Country), size = 2)+
#theme
theme_classic()+
theme(
axis.text = element_textbox_simple( size = 14),
legend.text = element_text( size = 14),
legend.title = element_text(size = 14),
panel.grid.major.y  = element_line(linetype = 2, colour ="grey" )
)+
#scales
scale_y_continuous(labels = dollar_format(suffix = " Millons"),
limits = c(0, NA),
expand = c(0,0))+
#labs)
labs(y = element_blank(), x = element_blank())
}
}
}
)
output$sociotable <- renderTable({
# Create the stargazer table
rset() %>%
select(Country, Value) %>%
pivot_wider(
names_from = Country,
values_from = Value
) %>%
unnest() %>%
as.data.frame() %>%
stargazer(., title = "Summary Table", type="text", column.sep.width = "10pt")
})
}
shinyApp(ui = ui, server = server)
